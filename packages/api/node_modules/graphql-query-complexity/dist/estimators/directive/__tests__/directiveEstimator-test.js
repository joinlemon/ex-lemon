"use strict";
/**
 * Created by Ivo MeiÃŸner on 28.07.17.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const chai_1 = require("chai");
const schema_1 = __importDefault(require("./fixtures/schema"));
const QueryComplexity_1 = __importDefault(require("../../../QueryComplexity"));
const index_1 = __importStar(require("../index"));
const CompatibleValidationContext_1 = require("../../../__tests__/fixtures/CompatibleValidationContext");
describe('directiveEstimator analysis', () => {
    const typeInfo = new graphql_1.TypeInfo(schema_1.default);
    it('should read complexity from directive', () => {
        const ast = graphql_1.parse(`
      query {
        scalar
      }
    `);
        const context = new CompatibleValidationContext_1.CompatibleValidationContext(schema_1.default, ast, typeInfo);
        const visitor = new QueryComplexity_1.default(context, {
            maximumComplexity: 100,
            estimators: [index_1.default()],
        });
        graphql_1.visit(ast, graphql_1.visitWithTypeInfo(typeInfo, visitor));
        chai_1.expect(visitor.complexity).to.equal(5);
    });
    it('should not allow negative cost', () => {
        const ast = graphql_1.parse(`
      query {
        negativeCostScalar
      }
    `);
        const context = new CompatibleValidationContext_1.CompatibleValidationContext(schema_1.default, ast, typeInfo);
        const visitor = new QueryComplexity_1.default(context, {
            maximumComplexity: 100,
            estimators: [index_1.default()],
        });
        graphql_1.visit(ast, graphql_1.visitWithTypeInfo(typeInfo, visitor));
        chai_1.expect(visitor.complexity).to.equal(0);
    });
    it('uses default directive name', () => {
        const ast = graphql_1.parse(`
      query {
        multiDirective
      }
    `);
        const context = new CompatibleValidationContext_1.CompatibleValidationContext(schema_1.default, ast, typeInfo);
        const visitor = new QueryComplexity_1.default(context, {
            maximumComplexity: 100,
            estimators: [index_1.default()],
        });
        graphql_1.visit(ast, graphql_1.visitWithTypeInfo(typeInfo, visitor));
        chai_1.expect(visitor.complexity).to.equal(2);
    });
    it('uses configured directive name', () => {
        const ast = graphql_1.parse(`
      query {
        multiDirective
      }
    `);
        const context = new CompatibleValidationContext_1.CompatibleValidationContext(schema_1.default, ast, typeInfo);
        const visitor = new QueryComplexity_1.default(context, {
            maximumComplexity: 100,
            estimators: [
                index_1.default({
                    name: 'cost',
                }),
            ],
        });
        graphql_1.visit(ast, graphql_1.visitWithTypeInfo(typeInfo, visitor));
        chai_1.expect(visitor.complexity).to.equal(1);
    });
    it('returns value + child complexity for configured multipliers but no values', () => {
        const ast = graphql_1.parse(`
      query {
        childList {
          scalar
        }
      }
    `);
        const context = new CompatibleValidationContext_1.CompatibleValidationContext(schema_1.default, ast, typeInfo);
        const visitor = new QueryComplexity_1.default(context, {
            maximumComplexity: 100,
            estimators: [index_1.default()],
        });
        graphql_1.visit(ast, graphql_1.visitWithTypeInfo(typeInfo, visitor));
        chai_1.expect(visitor.complexity).to.equal(5);
    });
    it('uses numeric multiplier value', () => {
        const ast = graphql_1.parse(`
      query {
        childList(limit: 2) {
          scalar
        }
      }
    `);
        const context = new CompatibleValidationContext_1.CompatibleValidationContext(schema_1.default, ast, typeInfo);
        const visitor = new QueryComplexity_1.default(context, {
            maximumComplexity: 100,
            estimators: [index_1.default()],
        });
        graphql_1.visit(ast, graphql_1.visitWithTypeInfo(typeInfo, visitor));
        chai_1.expect(visitor.complexity).to.equal(10);
    });
    it('combines multiple numeric multiplier values', () => {
        const ast = graphql_1.parse(`
      query {
        childList(limit: 2, first: 2) {
          scalar
        }
      }
    `);
        const context = new CompatibleValidationContext_1.CompatibleValidationContext(schema_1.default, ast, typeInfo);
        const visitor = new QueryComplexity_1.default(context, {
            maximumComplexity: 100,
            estimators: [index_1.default()],
        });
        graphql_1.visit(ast, graphql_1.visitWithTypeInfo(typeInfo, visitor));
        chai_1.expect(visitor.complexity).to.equal(20);
    });
    it('uses multiplier array value length', () => {
        const ast = graphql_1.parse(`
      query {
        childList(ids: ["a", "b"]) {
          scalar
        }
      }
    `);
        const context = new CompatibleValidationContext_1.CompatibleValidationContext(schema_1.default, ast, typeInfo);
        const visitor = new QueryComplexity_1.default(context, {
            maximumComplexity: 100,
            estimators: [index_1.default()],
        });
        graphql_1.visit(ast, graphql_1.visitWithTypeInfo(typeInfo, visitor));
        chai_1.expect(visitor.complexity).to.equal(10);
    });
    it('uses nested multiplier paths', () => {
        const ast = graphql_1.parse(`
      query {
        childList(filter: {limit: 3}) {
          scalar
        }
      }
    `);
        const context = new CompatibleValidationContext_1.CompatibleValidationContext(schema_1.default, ast, typeInfo);
        const visitor = new QueryComplexity_1.default(context, {
            maximumComplexity: 100,
            estimators: [index_1.default()],
        });
        graphql_1.visit(ast, graphql_1.visitWithTypeInfo(typeInfo, visitor));
        chai_1.expect(visitor.complexity).to.equal(15);
    });
    it('uses multi level nested multiplier paths with array reference', () => {
        const ast = graphql_1.parse(`
      query {
        childList(filter: {filters: [{limit: 2}]}) {
          scalar
        }
      }
    `);
        const context = new CompatibleValidationContext_1.CompatibleValidationContext(schema_1.default, ast, typeInfo);
        const visitor = new QueryComplexity_1.default(context, {
            maximumComplexity: 100,
            estimators: [index_1.default()],
        });
        graphql_1.visit(ast, graphql_1.visitWithTypeInfo(typeInfo, visitor));
        chai_1.expect(visitor.complexity).to.equal(10);
    });
    it('ignores fields without complexity directive', () => {
        const ast = graphql_1.parse(`
      query {
        noDirective
      }
    `);
        const context = new CompatibleValidationContext_1.CompatibleValidationContext(schema_1.default, ast, typeInfo);
        const visitor = new QueryComplexity_1.default(context, {
            maximumComplexity: 100,
            estimators: [index_1.default()],
        });
        graphql_1.visit(ast, graphql_1.visitWithTypeInfo(typeInfo, visitor));
        chai_1.expect(context.getErrors().length).to.equal(1);
        chai_1.expect(context.getErrors()[0].message).to.include('No complexity could be calculated for field Query.noDirective');
    });
    it('should create complexity directive that can be used to generate directive definition', () => {
        const complexityDirective = index_1.createComplexityDirective();
        const codeFirstSchema = new graphql_1.GraphQLSchema({
            directives: [complexityDirective],
        });
        // rebuilding code first schema
        // graphql-js <= 14 prints descriptions in different ways printSchema(schema) vs print(astNode)
        // and directive from code first schema has no astNode
        const builtCodeFirstSchema = graphql_1.buildSchema(graphql_1.printSchema(codeFirstSchema));
        const printedSchemaFirstDirective = graphql_1.print(schema_1.default.getDirective('complexity').astNode);
        const printedCodeFirstDirective = graphql_1.print(builtCodeFirstSchema.getDirective('complexity').astNode);
        chai_1.expect(printedSchemaFirstDirective).to.equal(printedCodeFirstDirective);
    });
    it('should create complexity directive with configured name', () => {
        const complexityDirective = index_1.createComplexityDirective({ name: 'cost' });
        const codeFirstSchema = new graphql_1.GraphQLSchema({
            directives: [complexityDirective],
        });
        // rebuilding code first schema
        // graphql-js <= 14 prints descriptions in different ways printSchema(schema) vs print(astNode)
        // and directive from code first schema has no astNode
        const builtCodeFirstSchema = graphql_1.buildSchema(graphql_1.printSchema(codeFirstSchema));
        const printedSchemaFirstDirective = graphql_1.print(schema_1.default.getDirective('cost').astNode);
        const printedCodeFirstDirective = graphql_1.print(builtCodeFirstSchema.getDirective('cost').astNode);
        chai_1.expect(printedSchemaFirstDirective).to.equal(printedCodeFirstDirective);
    });
});
//# sourceMappingURL=directiveEstimator-test.js.map